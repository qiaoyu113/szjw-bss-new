senvenProvide('moorCall.Monitor'), moorCall.Monitor.monitorTimersHandle = null, moorCall.Monitor.listenNode = null, moorCall.Monitor.endListenHandler = null, sevenDeclare('moorCall.Monitor', null, { constructor: function(e) { this.m7Phone = e, this._statusDesc.stReady = '签出', this._statusDesc.stInner = '内部通话', this._statusDesc.stNormal = '普通通话', this._statusDesc.stValidate = '验证通话', this._statusDesc.stOffline = '离线', this._statusDesc.stListen = '监听', this._statusDesc.stRing = '呼叫中', this._statusDesc.stDialout = '外呼通话', this._statusDesc.stDialTransfer = '外呼转接通话', this._statusDesc.stIdle = '空闲', this._statusDesc.stBusy = '忙碌', this._statusDesc.stRinging = '来电振铃', this._statusDesc.stTransfer = '转接通话', this._statusDesc.stUnavaliable = '失效', this._statusDesc.stWebcall = '网络来电', this._init(this.m7Phone); e = this.m7Phone.register('EvtMonitorQueue', this, 'm7ChangedQueue'); this.m7Handle.push(e), e = this.m7Phone.register('EvtMonitorPeer', this, 'onAgentChanged'), this.m7Handle.push(e), e = this.m7Phone.register('EvtMonitorServiceNo', this, 'm7ChangedServiceNo'), this.m7Handle.push(e) }, destroy: function() { for (var e in this.m7Handle) this.m7Phone.m7Noregister(this.m7Handle[e]) }, m7Handle: [], m7Phone: null, _statusDesc: [], _busyType: '0', _init: function(e) { var t; var s; var n; var o = document.getElementById('monitor.queues'); var i = (document.getElementById('monitor.agents'), document.getElementById('monitor.serviceNos')); if (e && e.m7MonitorQueues) for (var l in e.m7MonitorQueues)(t = e.m7MonitorQueues[l]) && t.queueId && (s = [t.members, t.queueName, t.idleAgentCount, t.totalAgentCount, t.queueWaitCount, t.totalCalls - t.abadonedCalls], (n = this.m7QueryQueue(t.queueId, o, 'queueId')) ? this.m7UpdateRowCell(n, t.queueId, s, 'queueId', !0) : this.m7CreateRowCell(o, t.queueId, s, 'queueId')); if (e && e.m7MonitorServiceNum) for (var l in e.m7MonitorServiceNum)(t = e.m7MonitorServiceNum[l]) && t.serviceNo && (s = [t.serviceNo, t.inCalls, t.inLost, t.inComplete], (n = this.m7QueryQueue(t.serviceNo, i, 'serviceNo')) ? this.m7UpdateRowCell(n, t.serviceNo, s, 'serviceNo', !0) : this.m7CreateRowCell(i, t.serviceNo, s, 'serviceNo')); moorCall.Monitor.setInterval() }, displayExtenType: function(e) { var t = ''; if (phone && phone.m7MonitorPeers) { var s = phone.m7MonitorPeers[e]; switch (s.extenType) { case 'sip':t = '软电话'; break; case 'gateway':t = 'SIP话机/网关'; break; case 'Local':t = s.localNo; break; case 'none':t = '无电话接入' } } return t }, onAgentChanged: function(e) { var t; var s; var n; var o = this; e.userId && e && (t = document.getElementById('icc.monitor.agents'), s = [e.DisplayName, e.exten, e.InComplete, e.OutComplete, e.callNo, e.extenType, e.callStatus, e.timestamp, e.status, 0, e.channel, e.linkedChannel, e.login], n = o.m7QueryQueue(e.userId, t, 'userId'), e.user.indexOf('admin') == -1 && (n ? o.m7UpdateRowCell(n, e.userId, s, 'userId') : o.m7CreateRowCell(t, e.userId, s, 'userId')), this.updatePeerNum()) }, updatePeerNum: function() { var e; var t = 0; var s = 0; var n = 0; for (e in phone.m7MonitorPeers) { var o = phone.m7MonitorPeers[e]; var i = this.m7DisplayStatus(o.userId); o.user != null && o.user.indexOf('admin') != -1 || (s++, i != this._statusDesc.stOffline && i != this._statusDesc.stUnavaliable && i != this._statusDesc.stReady && (n++, i == this._statusDesc.stIdle && t++)) }document.getElementById('icc.monitor.agents.onlinePeer').innerHTML = n, document.getElementById('icc.monitor.agents.idlePeer').innerHTML = t, document.getElementById('icc.monitor.agents.totalPeer').innerHTML = s }, m7ChangedServiceNo: function(e) { var t; var s; var n; var o = this; e && e.serviceNo && (t = document.getElementById('icc.monitor.serviceNos'), s = o.m7QueryQueue(e.serviceNo, t, 'serviceNo'), n = [e.serviceNo, e.inCalls, e.inLost, e.inComplete], s ? o.m7UpdateRowCell(s, e.serviceNo, n, 'serviceNo') : o.m7CreateRowCell(t, e.serviceNo, n, 'serviceNo')) }, m7CreateRowCell: function(e, t, s, n) { var o = []; var i = []; switch (o.push('<table border=0 cellSpacing=0 cellPadding=0 width=100% >'), o.push('<COLGROUP >'), n) { case 'userId':o.push("<col width='9%' /><col width='7%' /><col width='9%' /><col width='9%' /><col width='11%' /><col width='9%' /><col width='9%' /><col width='9%' /><col width='9%' /><col width='19%' />"); break; case 'queueId':o.push("<COL width='10%' span='5'>"); break; case 'serviceNo':o.push("<COL width='10%' span='4'>") } switch (o.push('</COLGROUP>'), o.push('<tr ' + n + '=' + t + " class='even' >"), n) { case 'userId':for (var l, r, a = 0; a < 10; a++)a == 7 ? (o.push("<td id='" + t + "_7'></td>"), s[a] && (s[6] != 'Idle' && !s[12] || s[12]) && (l = { count: l = (l = ((new Date()).valueOf() - phone.currentServerTime - 1e3 * parseFloat(s[a])) / 1e3) < 0 ? 0 : l }, monitorTimers[t] = l)) : a == 9 ? (o.push("<td id='" + t + "_9' extension='" + s[0] + "' status='" + s[6] + "' curChannel='" + s[10] + "' linkedChannel='" + s[11] + "' userId='" + t + "'>"), l = isSuperAdmin ? '<a href="javascript:;" class="operation">&nbsp;强拆&nbsp;</a><a href="javascript:;" class="operation">&nbsp;签出&nbsp;</a><a href="javascript:;" class="operation">&nbsp;签入&nbsp;</a>' : '<a href="javascript:;"  class="operation">&nbsp;监听&nbsp;</a><a style="display:none" href="javascript:;" class="operation">&nbsp;结束监听&nbsp;</a><a href="javascript:;" class="operation">&nbsp;强拆&nbsp;</a><a href="javascript:;" class="operation">&nbsp;抢接&nbsp;</a><a href="javascript:;" class="operation">&nbsp;签出&nbsp;</a><a href="javascript:;" class="operation">&nbsp;签入&nbsp;</a>', o.push(l), o.push('</td>'), i.push(t)) : (a == 5 ? (o.push('<td>'), r = this.displayExtenType(t), o.push(r)) : a == 6 ? (o.push('<td'), (r = this.m7DisplayStatus(t)) == this._statusDesc.stBusy ? this.m7Phone.m7PeerState && this.m7Phone.m7PeerState._get(this._busyType) != null && (o.push(" style='color: #E09A16'"), r = this.m7Phone.m7PeerState._get(this._busyType).value) : r == this._statusDesc.stWebcall || r == this._statusDesc.stInner || r == this._statusDesc.stRing || r == this._statusDesc.stRinging || r == this._statusDesc.stListen || r == this._statusDesc.stNormal || r == this._statusDesc.stDialout || r == this._statusDesc.stDialTransfer || r == this._statusDesc.stTransfer ? o.push(" style='color:#FF33FF'") : r == this._statusDesc.stIdle && o.push(" style='color: #4DB690'"), o.push('>'), o.push(r)) : (o.push('<td>'), o.push(s[a])), o.push('</td>')); break; case 'queueId':for (var u = '', a = 0; a < s.length; a++) if (a == 0) { for (var c in s[a]) this.m7Phone.m7Base.m7getAgentViaSipNum(c) != null && (u += this.m7Phone.m7Base.m7getAgentViaSipNum(c).DisplayName + ','); u != '' && (u = u.substring(0, u.lastIndexOf(','))) } else a == 3 ? (o.push('<td title=' + u + '> '), o.push("<a href='#'>"), o.push(s[a]), o.push('</a>')) : (o.push('<td '), a == 4 && s[a] != '0' && o.push(" style='color:#E09A16'"), o.push(' >'), o.push(s[a])), o.push('</td>'); break; case 'serviceNo':for (a = 0; a < s.length; a++)o.push('<td>'), o.push(s[a]), o.push('</td>') }o.push('</tr>'), o.push('</table>'); var h = document.createElement('tr'); for (a = 0; a < e.childNodes.length; a++)e.childNodes[a].nodeType == 1 && e.childNodes[a].tagName == 'TBODY' && e.childNodes[a].appendChild(h); n = document.createElement('th'); n.style.paddingLeft = '1px', h.appendChild(n), n.innerHTML = o.join(''), i != '' && this.m7ConnectEvent(i) }, m7DisplayStatus: function(e) { var t = ''; if (phone && phone.m7MonitorPeers) { var s = phone.m7MonitorPeers[e]; if (s.login && s.extenType != 'none')s.extenType != 'sip' && s.extenType != 'gateway' || s.register != 0 ? s.callStatus == 'Idle' ? s.busyType != '0' ? (t = this._statusDesc.stBusy, this._busyType = s.busyType) : (t = this._statusDesc.stIdle, this._busyType = '0') : t = s.callStatus == 'Ringing' ? this._statusDesc.stRinging : s.callStatus == 'Ring' ? this._statusDesc.stRing : s.callStatus == 'normal' ? this._statusDesc.stNormal : s.callStatus == 'inner' ? this._statusDesc.stInner : s.callStatus == 'dialout' ? this._statusDesc.stDialout : s.callStatus == 'transfer' ? this._statusDesc.stTransfer : s.callStatus == 'dialTransfer' ? this._statusDesc.stDialTransfer : s.callStatus == 'listen' ? this._statusDesc.stListen : s.callStatus == 'webcall' ? this._statusDesc.stWebcall : s.callStatus == 'validate' ? this._statusDesc.stValidate : s.callStatus + 'ass' : t = this._statusDesc.stUnavaliable; else if (s.login && s.extenType == 'none')t = ''; else switch (s.callStatus) { case 'Ring':t = this._statusDesc.stRing; break; case 'Ringing':t = this._statusDesc.stRinging; break; case 'inner':t = this._statusDesc.stInner; break; case 'normal':t = this._statusDesc.stNormal; break; case 'dialout':t = this._statusDesc.stDialout; break; case 'dialTransfer':t = this._statusDesc.stDialTransfer; break; case 'transfer':t = this._statusDesc.stTransfer; break; case 'listen':t = this._statusDesc.stListen; break; case 'webcall':t = this._statusDesc.stWebcall; break; case 'validate':t = this._statusDesc.stValidate; break; default:t = s.login || s.extenType != 'gateway' && s.extenType != 'Local' ? this._statusDesc.stReady : this._statusDesc.stOffline } } return t }, m7ConnectEvent: function(e) { for (var t = 0; t < e.length; t++)sevenContent(document.getElementById(e[t] + '_9').firstChild, 'onclick', this.listen), sevenContent(document.getElementById(e[t] + '_9').childNodes[1], 'onclick', this.endListen), sevenContent(document.getElementById(e[t] + '_9').childNodes[2], 'onclick', this.forceHangup), sevenContent(document.getElementById(e[t] + '_9').childNodes[3], 'onclick', this.loot), sevenContent(document.getElementById(e[t] + '_9').childNodes[4], 'onclick', this.m7ForKickout), sevenContent(document.getElementById(e[t] + '_9').childNodes[5], 'onclick', this.m7Checkin) }, m7ChangedQueue: function(e) { var t, s, n; e && e.queueId && (t = document.getElementById('icc.monitor.queues'), s = this.m7QueryQueue(e.queueId, t, 'queueId'), n = [e.members, e.queueName, e.idleAgentCount, e.totalAgentCount, e.queueWaitCount, e.totalCalls - e.abadonedCalls], s ? this.m7UpdateRowCell(s, e.queueId, n, 'queueId') : this.m7CreateRowCell(t, e.queueId, n, 'queueId')) }, endListen: function(e) { phone.hangup() }, m7QueryQueue: function(e, t, s) { for (var n = 0; n < t.rows.length; n++) if (e == t.rows[n].cells[0].firstChild.rows[0].getAttribute(s)) return t.rows[n].cells[0].firstChild.rows[0]; return null }, m7UpdateOtherRowCell: function(e, t, s, n, o) { if (n == 'userId') for (var i = 0; i < e.cells.length; i++)i == 6 ? (e.cells[i].setAttribute('extension', s[0]), e.cells[i].setAttribute('curChannel', s[7]), e.cells[i].setAttribute('status', s[4]), e.cells[i].setAttribute('linkedChannel', s[8]), e.cells[i].setAttribute('userId', t), o && (sevenContent(e.cells[i].firstChild, 'onclick', this.listen), sevenContent(e.cells[i].childNodes(4), 'onclick', this.m7ForKickout), sevenContent(e.cells[i].childNodes(2), 'onclick', this.forceHangup), sevenContent(e.cells[i].childNodes(3), 'onclick', this.loot), sevenContent(e.cells[i].childNodes(1), 'onclick', this.endListen), sevenContent(e.cells[i].childNodes(5), 'onclick', this.m7Checkin))) : e.cells[i].innerText = s[i] }, loot: function(e) { var t = e.target; var e = t.parentNode.getAttribute('linkedChannel'); t.parentNode.getAttribute('status'); t.parentNode.getAttribute('userId') != phone.userId ? sevenGetObject('phone.extenType') != 'none' ? moorCall.Monitor.m7IsPeerSelf() ? moorCall.moortools.error('该状态不允许抢接') : phone.m7LootCall(e) : moorCall.moortools.error('执行该操作必须以电话方式登录') : moorCall.moortools.error('不允许对自身进行该操作') }, forceHangup: function(e) { var t = e.target; var e = t.parentNode.getAttribute('status'); var t = t.parentNode.getAttribute('curChannel'); e != 'listen' && e != 'Idle' ? phone.m7hangupChann(t) : moorCall.moortools.error('该状态不允许强拆') }, listen: function(e) { var t, s, n; sevenGetObject('phone.extenType') != 'none' ? (s = (t = e.target).parentNode.getAttribute('userId'), t.parentNode.getAttribute('extension'), n = t.parentNode.getAttribute('status'), e = t.parentNode.getAttribute('curChannel'), s != phone.userId ? !moorCall.Monitor.m7IsPeerSelf() && (n == 'webcall' || n == 'inner' || n == 'normal' || n == 'dialout' || n == 'dialTransfer' || n == 'transfer') ? phone.m7PeerState.m7CurPeerStateKey != '0' ? (t.style.display = 'none', t.nextSibling.style.display = '', moorCall.Monitor.endListenHandler = phone.register('EvtEndListen', null, function() { moorCall.Monitor.onEndListen() }), moorCall.Monitor.listenNode = t, phone.listen(e)) : moorCall.moortools.error('请先将电话置为忙碌') : moorCall.moortools.error('该状态不允许监听') : moorCall.moortools.error('不允许对自身进行该操作')) : moorCall.moortools.error('执行该操作必须以电话方式登录') }, m7UpdateRowCell: function(e, t, s, n, o) { switch (n) { case 'userId':for (var i, l = 0; l < e.cells.length; l++) switch (l) { case 7:s[l] && (s[6] != 'Idle' && !s[12] || s[12]) ? (i = { count: i = (i = ((new Date()).valueOf() - phone.currentServerTime - 1e3 * parseFloat(s[l])) / 1e3) < 0 ? 0 : i, tdNode: e.cells[l] }, monitorTimers[t] = i) : (delete monitorTimers[t], e.cells[l].innerText = ''); break; case 6:var r = this.m7DisplayStatus(t); r == this._statusDesc.stBusy && this.m7Phone.m7PeerState && this.m7Phone.m7PeerState._get(this._busyType) != null ? (e.cells[l].style.color = 'red', r = this.m7Phone.m7PeerState._get(this._busyType).value) : r == this._statusDesc.stIdle ? e.cells[l].style.color = 'green' : r == this._statusDesc.stWebcall || r == this._statusDesc.stInner || r == this._statusDesc.stNormal || r == this._statusDesc.stDialTransfer || r == this._statusDesc.stDialout || r == this._statusDesc.stRing || r == this._statusDesc.stRinging || r == this._statusDesc.stListen || r == this._statusDesc.stTransfer ? e.cells[l].style.color = '#FF33FF' : e.cells[l].style.color = '', e.cells[l].innerHTML = r; break; case 5:r = this.displayExtenType(t); e.cells[l].innerHTML = r; break; case 9:e.cells[l].setAttribute('linkedChannel', s[11]), e.cells[l].setAttribute('extension', s[0]), e.cells[l].setAttribute('curChannel', s[10]), e.cells[l].setAttribute('status', s[6]), o && (sevenContent(e.cells[l].firstChild, 'onclick', this.listen), sevenContent(e.cells[l].childNodes(1), 'onclick', this.endListen), sevenContent(e.cells[l].childNodes(4), 'onclick', this.m7ForKickout), sevenContent(e.cells[l].childNodes(3), 'onclick', this.loot), sevenContent(e.cells[l].childNodes(2), 'onclick', this.forceHangup), sevenContent(e.cells[l].childNodes(5), 'onclick', this.m7Checkin)); break; default:e.cells[l].innerHTML = s[l] } break; case 'queueId':for (var a, u = '', l = 1; l < e.cells.length; l++)l == 2 ? (e.cells[l].title = u, e.cells[l].innerHTML = "<a href='#'>" + s[l + 1] + '</a>') : (e.cells[l].innerText = s[l + 1], l == 3 && s[l + 1] != '0' ? e.cells[l].style.color = 'red' : e.cells[l].style.color = ''); for (a in s[0]) this.m7Phone.m7Base.m7getAgentViaSipNum(a) != null && (u += this.m7Phone.m7Base.m7getAgentViaSipNum(a).DisplayName + ','); u != '' && (u = u.substring(0, u.lastIndexOf(','))); break; case 'serviceNo':for (l = 1; l < e.cells.length; l++)e.cells[l].innerText = s[l] } }, m7ForKickout: function(e) { var t = e.target; var e = (t.parentNode.getAttribute('extension'), t.parentNode.getAttribute('username'), t.parentNode.getAttribute('userId')); if (e != phone.userId) { if (phone && phone.m7MonitorPeers) { t = phone.m7MonitorPeers[e]; if (!t.login && t.extenType != 'Local' && t.extenType != 'gateway') return void moorCall.moortools.error('不允许对签出坐席进行该操作') }phone.kick(e) } else moorCall.moortools.error('不允许对自身进行该操作') }, m7Checkin: function(e) { var t = e.target; var e = (t.parentNode.getAttribute('username'), t.parentNode.getAttribute('extension'), t.parentNode.getAttribute('userId')); if (e != phone.userId) { if (phone && phone.m7MonitorPeers) { t = phone.m7MonitorPeers[e]; if (t.login) return void moorCall.moortools.error('不允许对签入坐席进行该操作'); if (!t.login && t.extenType == 'Local') return }phone.m7pick(e) } else moorCall.moortools.error('不允许对签出坐席进行该操作') } }), moorCall.Monitor.onEndListen = function() { var e = moorCall.Monitor.listenNode; e.nextSibling.style.display = 'none', e.style.display = '', phone.m7Noregister(moorCall.Monitor.endListenHandler) }, moorCall.Monitor.getTimer = function(e) { var t, s; e = parseInt(e) + 1; var n = (n = parseInt(e / 3600)) < 10 ? '0' + n : n; return n += ':', n += (t = parseInt(e % 3600 / 60)) < 10 ? '0' + t : t, n += ':', n += (s = e % 3600 % 60) < 10 ? '0' + s : s }, moorCall.Monitor.setInterval = function() { moorCall.Monitor.monitorTimersHandle && window.clearInterval(moorCall.Monitor.monitorTimersHandle), moorCall.Monitor.monitorTimersHandle = window.setInterval('moorCall.Monitor.m7DoCallTimer()', 1e3) }, moorCall.Monitor.m7DoCallTimer = function() { if (monitorTimers) for (var e in monitorTimers)document.getElementById(e + '_7') != null && (document.getElementById(e + '_7').innerText = moorCall.Monitor.getTimer(monitorTimers[e].count), monitorTimers[e].count++) }, moorCall.Monitor.m7IsPeerSelf = function() { var e = phone.userId; if (e && phone && phone.m7MonitorPeers) { e = phone.m7MonitorPeers[e]; if (e.callStatus == 'Ring' || e.callStatus == 'Ringing' || e.callStatus == 'inner' || e.callStatus == 'normal' || e.callStatus == 'dialout' || e.callStatus == 'dialTransfer' || e.callStatus == 'transfer' || e.callStatus == 'listen') return !0 } return !1 }
