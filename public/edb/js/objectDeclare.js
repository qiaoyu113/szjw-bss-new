senvenProvide('moorCall.stateElement.ring.innerRing'), senvenProvide('moorCall.stateElement.ring.normalRing'), senvenProvide('moorCall.stateElement.ring.listenRing'), senvenProvide('moorCall.stateElement.link.consultationLink'), senvenProvide('moorCall.stateElement.link.dialoutLink'), senvenProvide('moorCall.stateElement.link.innerLink'), senvenProvide('moorCall.stateElement.link.listenLink'), senvenProvide('moorCall.stateElement.link.normalLink'), senvenProvide('moorCall.stateElement.link.threeWayCallLink'), senvenProvide('moorCall.stateElement.ringring.normalRinging'), senvenProvide('moorCall.stateElement.ringring.innerRinging'), senvenProvide('moorCall.stateElement.ringring.consultationRinging'), senvenProvide('moorCall.stateElement.abate'), senvenProvide('moorCall.stateElement.hold'), senvenProvide('moorCall.stateElement.invalid'), senvenProvide('moorCall.stateElement.peerState'), senvenProvide('moorCall.stateElement.base'), senvenProvide('moorCall.SoftphoneBar'), senvenProvide('moorCall.callProcessor'), sevenDeclare('moorCall.stateElement.link.consultationLink', null, { constructor: function(e) { this.m7Base = e }, m7Base: null, m7ChooiceState: function(e) { e.Event == 'ChannelStatus' && (e.ChannelStatus == 'Hangup' ? this.m7Base.m7CurrentCallState = this.m7Base.m7getInvalid() : e.ChannelStatus == 'hold' ? this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneHold() : e.ChannelStatus == 'Link' && (e.LinkedChannel.ChannelType == 'threeWayCall' ? this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneThreeWayCallLink() : e.LinkedChannel.ChannelType == 'transfer' ? this.m7Base.m7bus() : e.LinkedChannel.ChannelType == 'inner' ? this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneInnerLink() : e.LinkedChannel.ChannelType == 'normal' ? this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneNormalLink() : e.LinkedChannel.ChannelType == 'dialout' && (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneDialoutLink()))) }, m7changeState: function() {} }), sevenDeclare('moorCall.stateElement.link.dialoutLink', null, { constructor: function(e) { this.m7Base = e }, m7Base: null, m7CallState: 'stDialTalking', m7ChooiceCallState: function(e) { e.Event == 'ChannelStatus' && e.Exten == this.m7Base.m7Phone.sipNo && (e.ChannelStatus == 'hold' ? (this.m7Base.m7CurrentCallState = new moorCall.stateElement.hold(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState)) : e.ChannelStatus == 'Hangup' ? (this.m7Base.m7CurrentCallState = this.m7Base.m7getInvalid(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState)) : e.ChannelStatus == 'Link' && (e.LinkedChannel.ChannelType == 'consultation' ? (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneConsultationLink(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState)) : e.LinkedChannel.ChannelType == 'ThreeWayCall' && (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneThreeWayCallLink(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState)))) }, m7changeToolBarState: function(e) { senvenMPublish('EvtCallToolBarChange', [e.m7CallState]) } }), sevenDeclare('moorCall.stateElement.link.innerLink', null, { constructor: function(e) { this.m7Base = e }, m7CallState: 'stInnerTalking', m7Base: null, m7ChooiceCallState: function(e) { e.Event == 'ChannelStatus' && e.Exten == this.m7Base.m7Phone.sipNo && (e.ChannelStatus == 'Hangup' ? (this.m7Base.m7CurrentCallState = this.m7Base.m7getInvalid(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState)) : e.ChannelStatus == 'hold' ? (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneHold(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState)) : e.ChannelStatus == 'Link' && e.LinkedChannel.ChannelType == 'consultation' && (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneConsultationLink(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState))) }, m7changeToolBarState: function(e) { senvenMPublish('EvtCallToolBarChange', [e.m7CallState]) } }), sevenDeclare('moorCall.stateElement.link.listenLink', null, { constructor: function(e) { this.m7Base = e }, m7CallState: 'stListened', m7Base: null, m7ChooiceCallState: function(e) { e.Event == 'ChannelStatus' && e.Exten == this.m7Base.m7Phone.sipNo && e.ChannelStatus == 'Hangup' && (this.m7Base.m7CurrentCallState = this.m7Base.m7getInvalid(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState), senvenMPublish('EvtEndListen', [])) }, m7changeToolBarState: function(e) { senvenMPublish('EvtCallToolBarChange', [e.m7CallState]) } }), sevenDeclare('moorCall.stateElement.link.normalLink', null, { constructor: function(e) { this.m7Base = e }, m7CallState: 'stTalking', m7Base: null, m7ChooiceCallState: function(e) { e.Event == 'ChannelStatus' && e.Exten == this.m7Base.m7Phone.sipNo && (e.ChannelStatus == 'hold' ? (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneHold(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState)) : e.ChannelStatus == 'Hangup' ? (this.m7Base.m7CurrentCallState = this.m7Base.m7getInvalid(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState)) : e.ChannelStatus == 'Link' && (e.LinkedChannel.ChannelType == 'consultation' ? (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneConsultationLink(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState)) : e.LinkedChannel.ChannelType == 'ThreeWayCall' && (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneThreeWayCallLink(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState)))) }, m7changeToolBarState: function(e) { senvenMPublish('EvtCallToolBarChange', [e.m7CallState]) } }), sevenDeclare('moorCall.stateElement.link.threeWayCallLink', null, { constructor: function(e) { this.m7Base = e }, m7CallState: 'stThreeWayTalking', m7Base: null, m7ChooiceCallState: function(e) { e.Event == 'ChannelStatus' && e.Exten == this.m7Base.m7Phone.sipNo && e.ChannelStatus == 'Hangup' && (this.m7Base.m7CurrentCallState = this.m7Base.m7getInvalid(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState)) }, m7changeToolBarState: function(e) { senvenMPublish('m7Base', [e.m7CallState]) } }), sevenDeclare('moorCall.stateElement.ring.innerRing', null, { constructor: function(e) { this.m7Base = e }, m7CallState: 'stInnerDialing', m7Base: null, m7ChooiceCallState: function(e) { e.Event == 'ChannelStatus' && e.Exten == this.m7Base.m7Phone.sipNo && (e.ChannelStatus == 'Hangup' ? (this.m7Base.m7CurrentCallState = this.m7Base.m7getInvalid(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState)) : e.ChannelStatus == 'Link' && e.LinkedChannel.ChannelType == 'inner' && (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneInnerLink(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState))) }, m7changeToolBarState: function(e) { senvenMPublish('EvtCallToolBarChange', [e.m7CallState]) } }), sevenDeclare('moorCall.stateElement.ring.listenRing', null, { constructor: function(e) { this.m7Base = e }, m7CallState: 'stListening', m7Base: null, m7ChooiceCallState: function(e) { e.Event == 'ChannelStatus' && e.Exten == this.m7Base.m7Phone.sipNo && (e.ChannelStatus == 'Up' ? e.ChannelType == 'listen' && (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneListenLink(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState)) : e.ChannelStatus == 'Hangup' && (this.m7Base.m7CurrentCallState = this.m7Base.m7getInvalid(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState), senvenMPublish('EvtEndListen', []))) }, m7changeToolBarState: function(e) { senvenMPublish('EvtCallToolBarChange', [e.m7CallState]) } }), sevenDeclare('moorCall.stateElement.ring.normalRing', null, { constructor: function(e) { this.m7Base = e }, m7CallState: 'stDialing', m7Base: null, m7ChooiceCallState: function(e) { e.Event == 'ChannelStatus' && e.Exten == this.m7Base.m7Phone.sipNo && (e.ChannelStatus == 'Link' ? e.LinkedChannel.ChannelType != 'dialout' && e.LinkedChannel.ChannelType != 'dialTransfer' || (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneDialoutLink(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState)) : e.ChannelStatus == 'Hangup' && (this.m7Base.m7CurrentCallState = this.m7Base.m7getInvalid(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState))) }, m7changeToolBarState: function(e) { senvenMPublish('EvtCallToolBarChange', [e.m7CallState]) } }), sevenDeclare('moorCall.stateElement.ringring.consultationRinging', null, { constructor: function(e) { this.m7Base = e }, m7Base: null, m7ChooiceState: function(e) { e.Event == 'ChannelStatus' && (e.ChannelStatus == 'Link' ? e.LinkedChannel.ChannelType == 'consultation' && (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneConsultationLink()) : e.ChannelStatus == 'Hangup' && (this.m7Base.m7CurrentCallState = this.m7Base.m7getInvalid())) }, m7changeState: function() {} }), sevenDeclare('moorCall.stateElement.ringring.innerRinging', null, { constructor: function(e) { this.m7Base = e }, m7CallState: 'stInnerBelling', m7Base: null, m7ChooiceCallState: function(e) { e.Event == 'ChannelStatus' && e.Exten == this.m7Base.m7Phone.sipNo && (e.ChannelStatus == 'Link' ? e.LinkedChannel.ChannelType == 'threeWayCall' ? (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneThreeWayCallLink(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState), this.m7Base.m7Phone.m7IsRing && (this.m7Base.m7Phone.m7StopSound(), this.m7Base.m7Phone.m7IsRing = !1)) : e.LinkedChannel.ChannelType == 'inner' && (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneInnerLink(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState), this.m7Base.m7Phone.m7IsRing && (this.m7Base.m7Phone.m7StopSound(), this.m7Base.m7Phone.m7IsRing = !1)) : e.ChannelStatus == 'Hangup' && (this.m7Base.m7CurrentCallState = this.m7Base.m7getInvalid(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState), this.m7Base.m7Phone.m7IsRing && (this.m7Base.m7Phone.m7StopSound(), this.m7Base.m7Phone.m7IsRing = !1))) }, m7changeToolBarState: function(e) { senvenMPublish('EvtCallToolBarChange', [e.m7CallState]) } }), sevenDeclare('moorCall.stateElement.ringring.normalRinging', null, { constructor: function(e) { this.m7Base = e }, m7CallState: 'stBelling', m7Base: null, m7ChooiceCallState: function(e) { e.Event == 'ChannelStatus' && e.Exten == this.m7Base.m7Phone.sipNo && (e.ChannelStatus == 'Hangup' ? (this.m7Base.m7CurrentCallState = this.m7Base.m7getInvalid(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState), this.m7Base.m7Phone.m7IsRing && (this.m7Base.m7Phone.m7StopSound(), this.m7Base.m7Phone.m7IsRing = !1)) : e.LinkedChannel.ChannelType == 'threeWayCall' ? (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneThreeWayCallLink(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState), this.m7Base.m7Phone.m7IsRing && (this.m7Base.m7Phone.m7StopSound(), this.m7Base.m7Phone.m7IsRing = !1)) : (e.LinkedChannel.ChannelType == 'transfer' || e.ChannelStatus == 'Link' && e.LinkedChannel.ChannelType == 'normal') && (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneNormalLink(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState), this.m7Base.m7Phone.m7IsRing && (this.m7Base.m7Phone.m7StopSound(), this.m7Base.m7Phone.m7IsRing = !1))) }, m7changeToolBarState: function(e) { senvenMPublish('EvtCallToolBarChange', [e.m7CallState]) } }), sevenDeclare('moorCall.stateElement.abate', null, { constructor: function(e) { this.m7Base = e }, m7CallState: 'stAbate', m7Base: null, m7ChooiceCallState: function(e) { var t; e.Event == 'PeerStatus' && e.Exten == this.m7Base.m7Phone.sipNo && (t = !1, (t = e.PeerStatus == 'Registered' ? !0 : t) && this.m7Base.m7CurrentCallState.m7CallState == 'stAbate' && (this.m7Base.m7CurrentCallState = this.m7Base.m7getInvalid(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState))) }, m7changeToolBarState: function(e) { senvenMPublish('EvtCallToolBarChange', [e.m7CallState]) } }), sevenDeclare('moorCall.stateElement.hold', null, { constructor: function(e) { this.m7Base = e }, m7Base: null, m7ChooiceState: function(e) { if (e.Event == 'ChannelStatus') switch (e.ChannelStatus) { case 'Hangup':this.m7Base.m7CurrentCallState = this.m7Base.m7getInvalid(); break; case 'Link':e.LinkedChannel.ChannelType == 'normalInner' ? this.m7Base.m7CurrentCallState = this.m7Base._getNormalInnerLink() : e.LinkedChannel.ChannelType == 'normal' ? this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneNormalLink() : e.LinkedChannel.ChannelType == 'consultation' ? this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneConsultationLink() : e.LinkedChannel.ChannelType == 'dialoutInner' ? this.m7Base.m7CurrentCallState = this.m7Base._getDialoutInnerLink() : e.LinkedChannel.ChannelType == 'dialout' && (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneDialoutLink()) } }, m7changeState: function() {} }), sevenDeclare('moorCall.stateElement.invalid', null, { constructor: function(e) { this.m7Base = e }, m7CallState: 'stInvalid', m7Base: null, m7ChooiceCallState: function(e) { if (e.Event == 'ChannelStatus' && e.Exten == this.m7Base.m7Phone.sipNo) switch (e.ChannelStatus) { case 'Ringing':e.LinkedChannel.ChannelType == 'normal' ? (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneNormalRinging(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState), this.m7Base.m7Phone.m7IsRing || (this.m7Base.m7Phone.m7PlaySound(), this.m7Base.m7Phone.m7IsRing = !0)) : e.LinkedChannel.ChannelType == 'consultation' ? (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneConsultationRinging(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState)) : e.LinkedChannel.ChannelType == 'inner' ? (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneInnerRinging(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState), this.m7Base.m7Phone.m7IsRing || (this.m7Base.m7Phone.m7PlaySound(), this.m7Base.m7Phone.m7IsRing = !0)) : e.LinkedChannel.ChannelType == 'dialTransfer' ? (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneNormalRing(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState)) : e.LinkedChannel.ChannelType == 'transfer' && (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneNormalRinging(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState), this.m7Base.m7Phone.m7IsRing || (this.m7Base.m7Phone.m7PlaySound(), this.m7Base.m7Phone.m7IsRing = !0)); break; case 'Hangup':this.m7Base.m7CurrentCallState = this.m7Base.m7getInvalid(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState); break; case 'hold':this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneHold(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState); break; case 'Ring':e.ChannelType == 'dialout' ? (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneNormalRing(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState)) : e.ChannelType == 'inner' ? (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneInnerRing(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState)) : e.ChannelType == 'listen' && (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneListenRing(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState)); break; case 'Up':e.ChannelType == 'listen' && (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneListenLink(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState)); break; case 'Link':e.LinkedChannel.ChannelType == 'normal' ? (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneNormalLink(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState)) : e.LinkedChannel.ChannelType == 'consultation' ? (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneConsultationLink(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState)) : e.LinkedChannel.ChannelType == 'threeWayCall' ? (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneThreeWayCallLink(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState)) : e.LinkedChannel.ChannelType == 'inner' ? (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneInnerLink(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState)) : e.LinkedChannel.ChannelType == 'dialout' ? (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneDialoutLink(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState)) : e.LinkedChannel.ChannelType == 'transfer' && (this.m7Base.m7CurrentCallState = this.m7Base.m7getPhoneNormalLink(), this.m7changeToolBarState(this.m7Base.m7CurrentCallState)) } }, m7changeToolBarState: function(e) { senvenMPublish('EvtCallToolBarChange', [e.m7CallState]) } }), sevenDeclare('moorCall.stateElement.peerState', null, { m7CallStateValue: [], constructor: function(e) { var t; this.m7Base = e, this.m7States == '' && (t = this).m7Base.m7Phone.PhonebarConfig.split(',').forEach(function(e) { t.m7put(e.split(':')[0], e.split(':')[1]), t.m7CallStateValue.push(e.split(':')[1]) }), this.m7CallStateValue[0] = 'stInvalid', this.m7CallStateValue[1] = 'stBusy', this.m7CallStateValue[2] = 'stRest', this.m7CallStateValue[99] = 'stSystemBusy' }, m7CurPeerStateKey: '0', m7States: new Array(), m7Base: null, m7CurPeerAutoTimeStateKey: '', _get: function(e) { try { for (var t = 0; t < this.m7States.length; t++) if (this.m7States[t].key == e) return this.m7States[t] } catch (e) { return null } }, m7ChooicePeerState: function(e) { e.Event != 'UserStatus' && e.Event != 'UserBusy' || this.m7Base.m7Phone.userId == e.UserID && (this.m7Base.m7CurrentPeerState = this.m7Base.m7getPhonePeerState(), this.m7Base.m7CurrentPeerState.m7setPeerState(e.BusyType), this.m7Base.m7CurrentCallState != null && this.m7Base.m7CurrentCallState.m7CallState == 'stInvalid' && this.m7changeToolBarState(this.m7Base.m7CurrentPeerState)) }, m7setPeerState: function(e) { this.m7CurPeerStateKey = e, this.m7CurPeerAutoTimeStateKey = e }, m7put: function(e, t) { this.m7States.push({ key: e, value: t }) }, m7changeToolBarState: function(e) { senvenMPublish('EvtPeerToolBarChange', [e.m7CurPeerStateKey]) } }), sevenDeclare('moorCall.stateElement.base', null, { constructor: function(e) { this.m7Phone = e }, m7CurrentCallState: null, m7OldCurrentCallState: null, m7CurrentPeerState: null, m7Phone: null, m7getInvalid: function() { return this.m7Phone.m7Invalid == null && (this.m7Phone.m7Invalid = new moorCall.stateElement.invalid(this)), this.m7Phone.m7Invalid }, m7getPhonePeerState: function() { return this.m7Phone.m7PeerState == null && (this.m7Phone.m7PeerState = new moorCall.stateElement.peerState(this)), this.m7Phone.m7PeerState }, m7getPhoneHold: function() { return this.m7Phone.m7Hold == null && (this.m7Phone.m7Hold = new moorCall.stateElement.hold(this)), this.m7Phone.m7Hold }, m7getPhoneAbate: function() { return this.m7Phone.m7Abate == null && (this.m7Phone.m7Abate = new moorCall.stateElement.abate(this)), this.m7Phone.m7Abate }, m7getPhoneNormalLink: function() { return this.m7Phone.m7NormalLink == null && (this.m7Phone.m7NormalLink = new moorCall.stateElement.link.normalLink(this)), this.m7Phone.m7NormalLink }, m7getPhoneInnerLink: function() { return this.m7Phone.m7InnerLink == null && (this.m7Phone.m7InnerLink = new moorCall.stateElement.link.innerLink(this)), this.m7Phone.m7InnerLink }, m7getPhoneConsultationLink: function() { return this.m7Phone.m7ConsultationLink == null && (this.m7Phone.m7ConsultationLink = new moorCall.stateElement.link.consultationLink(this)), this.m7Phone.m7ConsultationLink }, m7getPhoneThreeWayCallLink: function() { return this.m7Phone.m7ThreeWayCallLink == null && (this.m7Phone.m7ThreeWayCallLink = new moorCall.stateElement.link.threeWayCallLink(this)), this.m7Phone.m7ThreeWayCallLink }, m7getPhoneConsultationRinging: function() { return this.m7Phone.m7ConsultationRinging == null && (this.m7Phone.m7ConsultationRinging = new moorCall.stateElement.ringring.consultationRinging(this)), this.m7Phone.m7ConsultationRinging }, m7getPhoneListenLink: function() { return this.m7Phone.m7ListenLink == null && (this.m7Phone.m7ListenLink = new moorCall.stateElement.link.listenLink(this)), this.m7Phone.m7ListenLink }, m7getPhoneDialoutLink: function() { return this.m7Phone.m7DialoutLink == null && (this.m7Phone.m7DialoutLink = new moorCall.stateElement.link.dialoutLink(this)), this.m7Phone.m7DialoutLink }, m7getPhoneNormalRinging: function() { return this.m7Phone.m7NormalRinging == null && (this.m7Phone.m7NormalRinging = new moorCall.stateElement.ringring.normalRinging(this)), this.m7Phone.m7NormalRinging }, m7getPhoneInnerRing: function() { return this.m7Phone.m7InnerRing == null && (this.m7Phone.m7InnerRing = new moorCall.stateElement.ring.innerRing(this)), this.m7Phone.m7InnerRing }, m7getPhoneNormalRing: function() { return this.m7Phone.m7NormalRing == null && (this.m7Phone.m7NormalRing = new moorCall.stateElement.ring.normalRing(this)), this.m7Phone.m7NormalRing }, m7getPhoneInnerRinging: function() { return this.m7Phone.m7InnerRinging == null && (this.m7Phone.m7InnerRinging = new moorCall.stateElement.ringring.innerRinging(this)), this.m7Phone.m7InnerRinging }, m7getPhoneListenRing: function() { return this.m7Phone.m7ListenRing == null && (this.m7Phone.m7ListenRing = new moorCall.stateElement.ring.listenRing(this)), this.m7Phone.m7ListenRing }, m7getPhoneUserViaExten: function(e) { if (!this.m7Phone.m7MonitorPeers) return null; for (var t in this.m7Phone.m7MonitorPeers) if (this.m7Phone.m7MonitorPeers[t].exten == e) return this.m7Phone.m7MonitorPeers[t]; return null }, m7bus: function() {}, m7ChooiceState: function(e) { currentEventObj = e, this.m7setCallObj(e), this.m7setMonitorObjs(e), e.Event == 'PeerStatus' ? e.Exten == this.m7Phone.sipNo && (e.PeerStatus != 'Registered' || this.m7Phone.extenType != 'gateway' && this.m7Phone.extenType != 'sip' && this.m7Phone.extenType != 'Local' ? e.PeerStatus == 'Registered' || this.m7Phone.extenType != 'gateway' && this.m7Phone.extenType != 'sip' && this.m7Phone.extenType != 'Local' || (this.m7CurrentCallState = this.m7getPhoneAbate(), this.m7CurrentCallState.m7changeToolBarState(this.m7CurrentCallState)) : (this.m7CurrentCallState = this.m7getInvalid(), this.m7CurrentCallState.m7changeToolBarState(this.m7CurrentCallState))) : (this.m7CurrentPeerState == null && (this.m7CurrentPeerState = this.m7getPhonePeerState()), this.m7CurrentPeerState.m7ChooicePeerState(e), this.m7CurrentCallState == null && (this.m7CurrentCallState = this.m7getInvalid(), this.m7Phone.extenType == 'Local' && this.m7CurrentCallState.m7changeToolBarState(this.m7CurrentCallState)), this.m7CurrentCallState.m7ChooiceCallState(e)) }, m7setCallObj: function(e) { var t, a; _cti_peerstate = e.ChannelStatus == 'Hangup' || e.PeerStatus == 'Registered' || e.PeerStatus == 'Unregistered' ? 1 : null, e.Event == 'UserBusy' && e.UserID == this.m7Phone.userId && e.BusyType && e.BusyType != '99' && changePhoneBarStatus(e.BusyType), e.Event == 'ChannelStatus' ? e.Exten == this.m7Phone.sipNo && (e.ChannelStatus == 'Ring' ? (this.m7Phone.m7CurentChannel = e.Channel, e.ChannelType == 'listen' || e.ChannelType == 'dialout' && (a = '', e.Data.CallSheetID && (a = e.Data.CallSheetID), this.m7Phone.callObject = { callSheetId: a, originCallNo: e.FromCid, originCalledNo: e.FromDid, callType: 'dialout', offeringTime: moorCall.moortools.getDate(new Date(1e3 * e.Timestamp)), data: e.Data, status: 'notDeal', monitorFilename: '' }, this.m7Phone.dialoutData && (this.m7Phone.callObject.data = this.m7Phone.dialoutData, this.m7Phone.dialoutData = null), senvenMPublish('EvtDialing', [this.m7Phone.callObject]))) : e.ChannelStatus == 'Ringing' ? (this.m7Phone.m7CurentChannel = e.Channel, this.m7Phone.m7OtherChannel = e.LinkedChannel.Channel, e.LinkedChannel.ChannelType != 'dialTransfer' && e.LinkedChannel.ChannelType != 'transfer' || e.Link && (a = '', (t = e.LinkedChannel).Data && t.Data.CallSheetID && (a = t.Data.CallSheetID), this.m7Phone.m7CallId = t.Uniqueid, this.m7Phone.callObject = { callSheetId: a, originId: t.Uniqueid, originCallNo: t.FromCid, originCalledNo: t.FromDid, callType: t.ChannelType, queue: t.Queue, location: t.Location, callId: t.Uniqueid, skillgroupNo: t.Queue, monitorFilename: '', offeringTime: moorCall.moortools.getDate(new Date(1e3 * e.Timestamp)), data: {}, agent: e.Data.Agent, status: 'notDeal', beginTime: '', endTime: '' }, t.Data && (this.m7Phone.callObject.data = t.Data, this.m7Phone.callObject.data.callSheetId = a), senvenMPublish('EvtRing', [this.m7Phone.callObject])), e.LinkedChannel.ChannelType == 'normal' && e.Link && (t = e.LinkedChannel, this.m7Phone.m7CallId != t.Uniqueid && (this.m7Phone.m7CallId = t.Uniqueid, a = '', t.Data && t.Data.CallSheetID && (a = t.Data.CallSheetID), this.m7Phone.callObject = { callSheetId: a, originId: t.Uniqueid, originCallNo: t.FromCid, originCalledNo: t.FromDid, callType: t.ChannelType, callId: t.Uniqueid, queue: t.Queue, location: t.Location, skillgroupNo: t.Queue, monitorFilename: '', offeringTime: moorCall.moortools.getDate(new Date(1e3 * e.Timestamp)), data: {}, beginTime: '', endTime: '', agent: e.Data.Agent, status: 'notDeal', ivrkey: t.Data.IVRKEY, callerCity: t.CallerCity, callerProvince: t.CallerProvince, queueName: t.QueueName }, t.Data && (this.m7Phone.callObject.data = t.Data, this.m7Phone.callObject.data.callSheetId = a), senvenMPublish('EvtRing', [this.m7Phone.callObject]))), this.m7Phone.m7IsLooter && (this.m7Phone.m7IsLooter = !1), this.m7Phone.m7CurentChannel = e.Channel) : e.ChannelStatus == 'Link' ? (this.m7Phone.m7CurentChannel = e.Channel, t = e.LinkedChannel, this.m7Phone.m7OtherChannel = t.Channel, this.m7Phone.callObject.callType = e.ChannelType, this.m7Phone.callObject.beginTime || (this.m7Phone.callObject.beginTime = moorCall.moortools.getDate(new Date(1e3 * e.Timestamp))), a = '', t.Data && t.Data.CallSheetID && (a = t.Data.CallSheetID), this.m7Phone.callObject.originCallNo = t.FromCid, this.m7Phone.callObject.originCalledNo = t.FromDid, this.m7Phone.callObject.callSheetId = a, this.m7Phone.callObject.originId = t.Uniqueid, this.m7Phone.callObject.queue = t.Queue, this.m7Phone.callObject.location = t.Location, this.m7Phone.callObject.callId = t.Uniqueid, this.m7Phone.callObject.skillgroupNo = t.Queue, this.m7Phone.callObject.status = 'dealing', e.RingTime && (this.m7Phone.callObject.offeringTime = moorCall.moortools.getDate(new Date(1e3 * e.RingTime))), t.Data && (this.m7Phone.callObject.data = t.Data, this.m7Phone.callObject.data.callSheetId = a), senvenMPublish('EvtConnected', [this.m7Phone.callObject])) : e.ChannelStatus == 'Unlink' ? (this.m7Phone.m7CurentChannel = e.Channel, this.m7Phone.m7CallId = '') : e.ChannelStatus == 'Hangup' && (this.m7Phone.m7CurentChannel = e.Channel, this.m7Phone.m7CallId = '', this.m7Phone.m7CurentChannel == e.Channel && (e.ChannelType == 'normal' || e.ChannelType == 'dialout' || e.ChannelType == 'dialTransfer' || e.ChannelType == 'transfer' || e.ChannelType == 'webcall' ? (this.m7Phone.callObject.endTime = moorCall.moortools.getDate(new Date(1e3 * e.Timestamp)), this.m7Phone.callObject.ringTime = moorCall.moortools.getDate(new Date(1e3 * e.Data.RingTime)), e.ChannelType != 'dialout' && e.ChannelType != 'dialTransfer' || (this.m7Phone.callObject.data = e.Data), senvenMPublish('EvtHangup', [this.m7Phone.callObject])) : e.ChannelType == 'listen' && (this.m7Phone.m7OtherChannel = '', senvenMPublish('EvtEndListen', []))))) : e.Event !== 'ConsultSuccess' && e.Event !== 'ConsultFailed' || (moorCall.moortools.close(), e.Event === 'ConsultSuccess' ? (moorCall.moortools.m7ShowSuccess('咨询成功'), senvenMPublish('EvtBarChange', [this.m7Phone.extenType + '_stConcultTalking'])) : e.Event === 'ConsultFailed' && moorCall.moortools.error('咨询失败')) }, m7getAgentViaSipNum: function(e) { if (!this.m7Phone.m7MonitorPeers) return null; for (var t in this.m7Phone.m7MonitorPeers) { this.m7Phone.m7MonitorPeers[t].sipNo; if (this.m7Phone.m7MonitorPeers[t].sipNo == e) return this.m7Phone.m7MonitorPeers[t] } return null }, m7setMonitorObjs: function(e) { var t, a, n; if (e.Event == 'ChannelStatus')e.ChannelStatus == 'Hangup' && e.UserID == null || (n = this.m7getAgentViaSipNum(e.Exten)) && (e.ChannelStatus == 'Down' ? (n.callStatus = 'Down', n.channel = e.Channel, this.m7UpdQueueInfo()) : e.ChannelStatus == 'Ring' ? (n.callStatus = 'Ring', n.called = !1, n.C5Status = e.C5Status, n.timestamp = e.Timestamp, n.channel = e.Channel, e.C5Status == 'OutboundCall' || e.C5Status == 'InboundCall' || e.C5Status == 'listen' ? n.callNo = e.Data.ListenExten : e.FromDid && (n.callNo = e.FromDid), senvenMPublish('EvtMonitorPeer', [n])) : e.ChannelStatus == 'Ringing' ? (n.called = !0, n.callStatus = 'Ringing', n.C5Status = e.C5Status, n.channel = e.Channel, n.linkedChannel = e.LinkedChannel.Channel, e.ChannelType == 'dialTransfer' ? n.callNo = e.FromDid : n.callNo = e.FromCid, n.timestamp = e.Timestamp, senvenMPublish('EvtMonitorPeer', [n])) : e.ChannelStatus == 'Up' ? e.ChannelType == 'listen' && (n.callNo = e.Data.ListenExten, n.timestamp = e.Timestamp, n.C5Status = e.C5Status, n.callStatus = e.ChannelType, n.linked = !0, n.channel = e.Channel, senvenMPublish('EvtMonitorPeer', [n])) : e.ChannelStatus == 'Link' ? (n.timestamp = e.Timestamp, n.C5Status = e.C5Status, linked = !0, n.channel = e.Channel, n.linkedChannel = e.LinkedChannel.Channel, n.callStatus = e.ChannelType, e.ChannelType == 'dialout' || e.ChannelType == 'dialTransfer' ? n.callNo = e.LinkedChannel.FromDid : (n.callNo = e.LinkedChannel.FromCid, this.m7Phone.userId == e.UserID && m7$('#moorCall-dialout-input').val(n.callNo)), senvenMPublish('EvtMonitorPeer', [n])) : e.ChannelStatus == 'Unlink' || e.ChannelStatus == 'Hangup' && (n.channel == e.Channel && (this.m7Phone.m7OtherChannel != e.Channel || this.m7CurrentCallState.m7CallState != 'stListening' && this.m7CurrentCallState.m7CallState != 'stListened' || this.m7Phone.hangup(), n.C5Status = e.C5Status, n.callNo = '', n.callStatus = 'Idle', n.timestamp = e.Timestamp, linked = !1, n.channel = '', n.linkedChannel = '', senvenMPublish('EvtMonitorPeer', [n])), this.m7UpdQueueInfo())); else if (e.Event == 'QueueParams') { var l = {}; if (l = this.m7queryQueueItems(e)) { for (var s in e.Removed && (l.removed = !0), l.queueName = e.DisplayName, l.idleAgentCount = e.Members - e.BusyMembers, l.busyAgentCount = e.BusyMembers, l.totalAgentCount = e.Members, l.queueWaitCount = e.Calls, l.abadonedCalls = e.Abandoned, l.totalCalls = e.TotalCalls, l.DisplayName = e.DisplayName, l.members = [], e.QueueMember) { var i = e.QueueMember[s]; l.members[i] = i }senvenMPublish('EvtMonitorQueue', [l]) } else { for (var s in l = { queueName: e.DisplayName, queueId: e.Queue, idleAgentCount: e.Members - e.BusyMembers, busyAgentCount: e.BusyMembers, totalAgentCount: e.Members, queueWaitCount: e.Calls, abadonedCalls: e.Abandoned, DisplayName: e.DisplayName, totalCalls: e.TotalCalls, members: [], removed: !1 }, e.QueueMember) { i = e.QueueMember[s]; l.members[i] = i } this.m7Phone.m7MonitorQueues[e.Queue] = l } this.m7UpdQueueInfo() } else e.Event == 'QueueMemberAdded' ? (l = this.m7queryQueueItems(e)) && (l.members[e.Exten] || (l.members[e.Exten] = e.Exten, l.totalAgentCount++, this.m7UpdQueueInfo())) : e.Event == 'QueueMemberRemoved' ? (l = this.m7queryQueueItems(e)) && l.members[e.Exten] && (delete l.members[e.Exten], l.totalAgentCount--, this.m7UpdQueueInfo()) : e.Event == 'QueueMemberPaused' || (e.Event == 'Join' ? ((l = this.m7queryQueueItems(e)) && (l.queueWaitCount++, senvenMPublish('EvtMonitorQueue', [l])), senvenMPublish('EvtQueueEntryAdd', [e])) : e.Event == 'Leave' ? ((l = this.m7queryQueueItems(e)) && (l.totalCalls++, l.queueWaitCount--, l.queueWaitCount < 0 && (l.queueWaitCount = 0), senvenMPublish('EvtMonitorQueue', [l])), senvenMPublish('EvtQueueEntryRemove', [e])) : e.Event == 'QueueCallerAbandon' ? ((l = this.m7queryQueueItems(e)) && (l.abadonedCalls++, senvenMPublish('EvtMonitorQueue', [l])), senvenMPublish('EvtQueueEntryRemove', [e])) : e.Event == 'UserStatus' ? (a = !1, e.PeerStatus == 'Registered' && (a = !0), this.m7Phone.m7MonitorPeers[e.UserID] ? ((n = this.m7Phone.m7MonitorPeers[e.UserID]).peerStatus = e.PeerStatus, n.status = e.Status, n.exten = e.Exten, n.sipNo = e.SipNum, n.C5Status = e.C5Status, n.busy = e.Busy, n.extenType = e.ExtenType, n.login = e.Login, n.loginExten = e.LoginExten, n.name = e.User, n.DisplayName = e.DisplayName, n.userId = e.UserID, n.user = e.User, n.localNo = e.Local, n.register = a, n.InCalls = e.InCalls, n.InComplete = e.InComplete, n.OutCalls = e.OutCalls, n.OutComplete = e.OutComplete, n.busyTimestamp = e.BusyTimestamp, n.loginTimestamp = e.LoginTimestamp, n.busyType = e.BusyType, n.timestamp = n.login ? n.busyTimestamp : '', senvenMPublish('EvtMonitorPeer', [n]), this.m7UpdQueueInfo()) : (n = { exten: e.Exten, sipNo: e.SipNum, name: e.User, DisplayName: e.DisplayName, loginExten: e.LoginExten, peerStatus: e.PeerStatus, status: e.Status, C5Status: e.C5Status, busy: e.Busy, extenType: e.ExtenType, login: e.Login, userId: e.UserID, user: e.User, localNo: e.Local, register: a, InCalls: e.InCalls, InComplete: e.InComplete, OutCalls: e.OutCalls, OutComplete: e.OutComplete, linked: !1, channel: '', linkedChannel: '', called: !1, callStatus: 'Idle', callNo: '', timestamp: e.Login ? e.BusyTimestamp : '', busyTimestamp: e.BusyTimestamp, loginTimestamp: e.LoginTimestamp, busyType: e.BusyType }, this.m7Phone.m7MonitorPeers[e.UserID] = n, senvenMPublish('EvtMonitorPeer', [n]))) : e.Event == 'UserBusy' ? this.m7Phone.m7MonitorPeers[e.UserID] && ((n = this.m7Phone.m7MonitorPeers[e.UserID]).busy = e.Busy, n.busyType = e.BusyType, n.busyTimestamp = e.BusyTimestamp, n.timestamp = n.login ? n.busyTimestamp : '', n.loginTimestamp = e.LoginTimestamp, senvenMPublish('EvtMonitorPeer', [n]), this.m7UpdQueueInfo()) : e.Event == 'UserCallsUpdate' ? this.m7Phone.m7MonitorPeers[e.UserID] && ((n = this.m7Phone.m7MonitorPeers[e.UserID]).InCalls = e.InCalls, n.InComplete = e.InComplete, n.OutCalls = e.OutCalls, n.OutComplete = e.OutComplete, senvenMPublish('EvtMonitorPeer', [n]), this.m7UpdQueueInfo()) : e.Event == 'UserSignIn' ? this.m7Phone.m7MonitorPeers[e.UserID] && ((n = this.m7Phone.m7MonitorPeers[e.UserID]).extenType = e.ExtenType, n.login = e.Login, n.sipNo = e.SipNum, senvenMPublish('EvtMonitorPeer', [n]), this.m7UpdQueueInfo()) : e.Event == 'UserSignOut' ? this.m7Phone.m7MonitorPeers[e.UserID] && ((n = this.m7Phone.m7MonitorPeers[e.UserID]).extenType = e.ExtenType, n.sipNo = e.SipNum, n.login = e.Login, senvenMPublish('EvtMonitorPeer', [n]), this.m7UpdQueueInfo()) : e.Event == 'TrunkStatus' ? (this.m7Phone.m7MonitorServiceNum[e.ServiceNo] ? ((t = this.m7Phone.m7MonitorServiceNum[e.ServiceNo]).inCalls = e.InCalls, t.inLost = e.InLost, t.inComplete = e.InComplete, t.outCalls = 0, t.outComplete = 0) : (t = { serviceNo: e.ServiceNo, inCalls: e.InCalls, inLost: e.InLost, inComplete: e.InComplete, outCalls: 0, outComplete: 0 }, this.m7Phone.m7MonitorServiceNum[e.ServiceNo] = t), senvenMPublish('EvtMonitorServiceNo', [this.m7Phone.m7MonitorServiceNum[e.ServiceNo]])) : e.Event == 'PeerStatus' ? (a = !1, e.PeerStatus == 'Registered' && (a = !0), (n = this.m7getAgentViaSipNum(e.Exten)) && (n.register = a, n.status = e.Status, senvenMPublish('EvtMonitorPeer', [n]), this.m7UpdQueueInfo())) : e.Event == 'AccountStatus' && (this.m7Phone.m7AccountCall = e, senvenMPublish('EvtAccountStatus', [e]))) }, m7queryQueueItems: function(e) { if (!this.m7Phone.m7MonitorQueues) return null; for (var t in this.m7Phone.m7MonitorQueues) if (this.m7Phone.m7MonitorQueues[t].queueId == e.Queue) return this.m7Phone.m7MonitorQueues[t]; return null }, m7UpdQueueInfo: function() { for (var e in this.m7Phone.m7MonitorQueues) { var t; var a = this.m7Phone.m7MonitorQueues[e]; var n = a.members; for (t in a.busyAgentCount = 0, a.idleAgentCount = 0, n) { var l = this.m7getAgentViaSipNum(n[t]); l ? l.extenType == 'sip' ? l.register && l.login && !l.busy && l.callStatus == 'Idle' ? a.idleAgentCount++ : a.busyAgentCount++ : l.extenType == 'gateway' ? !l.register || l.busy || l.callStatus != 'Idle' ? a.busyAgentCount++ : a.idleAgentCount++ : l.extenType != 'Local' || l.busy || l.callStatus != 'Idle' ? a.busyAgentCount++ : a.idleAgentCount++ : a.idleAgentCount++ }senvenMPublish('EvtMonitorQueue', [a]) } }, m7GetQueueInfo: function() { var e; var t = ''; for (e in this.m7Phone.m7MonitorQueues) { var a = this.m7Phone.m7MonitorQueues[e]; if (a != null) { var n; var l = a.members; for (n in l) { var s = this.m7getAgentViaSipNum(l[n]); s != null && (t += s.exten + ',' + s.busyType + ';') } } } return t } }), sevenDeclare('moorCall.SoftphoneBar', null, { constructor: function(e, t) { this.m7Phone = e, this.m7CallStateDescription.stInnerDialing = '呼叫中', this.m7CallStateDescription.stInnerTalking = '内部通话', this.m7CallStateDescription.stInvalid = '空闲', this.m7CallStateDescription.stAbate = '失效', this.m7CallStateDescription.stBelling = '来电振铃', this.m7CallStateDescription.stTalking = '普通通话', this.m7CallStateDescription.stListening = '监听振铃', this.m7CallStateDescription.stListened = '监听中', this.m7CallStateDescription.stDialing = '呼叫中', this.m7CallStateDescription.stDialTalking = '外呼通话', this.m7CallStateDescription.stHold = '保持', this.m7CallStateDescription.stInnerBelling = '来电振铃', this.m7CallStateDescription.stThreeWayTalking = '三方通话', this.m7CallStateColor[0] = '#53D464', this.m7CallStateColor[1] = '#FF7A90', this.m7CallStateColor[2] = '#E3A42C', this.m7CallStateColor[99] = '#ff6400', this.m7CallStateColor.call = '#FF33FF', this.m7Phone.register('EvtPeerToolBarChange', this, 'm7ChangedPeerToolBarState'), this.m7Phone.register('EvtCallToolBarChange', this, 'm7ChangedCallToolBarState'), this.m7SrcNodeDom = document.getElementById(t), this.m7SrcNodePeerStateDom = document.getElementById(t + '.peerState'), this.m7SrcNodePeerTimeStateDom = document.getElementById(t + '.peerTimeState'), this.m7SrcNodeCallTimeStateDom = document.getElementById(t + '.callTimeState'), this.m7SrcNodeSelectStateDom = document.getElementById(t + '.select'), this.m7SrcNodeSelectMenuDom = document.getElementById(t + '.selectMenu'), this.m7SrcNodePhoneNumDom = document.getElementById(t + '.softPhoneNum'), this.m7Phone.register('EvtBarChange', this, 'm7render') }, m7SrcNodeSelectStateDom: null, m7SrcNodePeerStateDom: null, m7SrcNodePhoneNumDom: null, m7SrcNodeCallTimeStateDom: null, m7SrcNodePeerTimeStateDom: null, m7SrcNodeSelectMenuDom: null, m7SrcNodeDom: null, m7CallStateDescription: [], m7Phone: null, m7CallStateColor: [], m7PeerHour: '0', m7PeerSecond: '1', m7PeerMinute: '0', m7PeerCalculagraph: null, Local_stInvalid: ['DialEnable', 'smallDialEnable', 'HangupDisable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'IdleDisable', 'RestDisable', 'BusyDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], Local_stConcultTalking: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldDisable', 'ConsultThreeWayCallEnable', 'ConsultTransferEnable', 'ConsultDisable', 'StopConsultEnable', 'transferIVR', 'transferSatisfaction'], Local_stBusy: ['DialEnable', 'smallDialEnable', 'HangupDisable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'IdleDisable', 'RestDisable', 'BusyDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], Local_stThreeWayTalking: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], Local_stRest: ['DialEnable', 'smallDialEnable', 'HangupDisable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'IdleDisable', 'RestDisable', 'BusyDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], Local_stInnerBelling: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], Local_stDialing: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], Local_stListened: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], Local_stDialTalking: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldEnable', 'ThreeWayCallDisable', 'TransferEnable', 'ConsultEnable', 'StopConsultDisable', 'transferIVREnable', 'transferSatisfactionEnable'], Local_stListening: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'transferIVREnable', 'transferSatisfactionEnable'], Local_stHold: ['DialDisable', 'smallDialDisable', 'HangupDisable', 'HoldGetEnable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], Local_stTalking: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldEnable', 'ThreeWayCallDisable', 'TransferEnable', 'ConsultEnable', 'StopConsultDisable', 'transferIVREnable', 'transferSatisfactionEnable'], Local_stAbate: ['DialDisable', 'smallDialDisable', 'HangupDisable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'transferIVR', 'transferSatisfaction'], Local_stBelling: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], Local_stInnerDialing: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], Local_stInnerTalking: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'transferIVR', 'transferSatisfaction'], Local_stSystemBusy: ['DialEnable', 'smallDialEnable', 'HangupDisable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'IdleDisable', 'RestDisable', 'BusyDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], gateway_stInvalid: ['DialEnable', 'smallDialEnable', 'HangupDisable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'IdleDisable', 'RestDisable', 'BusyDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], gateway_stConcultTalking: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'ConsultThreeWayCallEnable', 'ConsultTransferEnable', 'ConsultDisable', 'StopConsultEnable', 'transferIVR', 'transferSatisfaction'], gateway_stBusy: ['DialEnable', 'smallDialEnable', 'HangupDisable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'IdleDisable', 'RestDisable', 'BusyDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], gateway_stThreeWayTalking: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], gateway_stInnerBelling: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], gateway_stRest: ['DialEnable', 'smallDialEnable', 'HangupDisable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'IdleDisable', 'RestDisable', 'BusyDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], gateway_stListened: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], gateway_stDialing: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], gateway_stListening: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], gateway_stTalking: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldEnable', 'ThreeWayCallDisable', 'TransferEnable', 'ConsultEnable', 'StopConsultDisable', 'transferIVREnable', 'transferSatisfactionEnable'], gateway_stDialTalking: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldEnable', 'ThreeWayCallDisable', 'TransferEnable', 'ConsultEnable', 'StopConsultDisable', 'transferIVREnable', 'transferSatisfactionEnable'], gateway_stBelling: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'transferIVR', 'transferSatisfaction'], gateway_stHold: ['DialDisable', 'smallDialDisable', 'HangupDisable', 'HoldGetEnable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'StopConsultDisable', 'transferIVREnable', 'transferSatisfactionEnable'], gateway_stAbate: ['DialDisable', 'smallDialDisable', 'HangupDisable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], gateway_stInnerTalking: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'transferIVR', 'transferSatisfaction'], gateway_stInnerDialing: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], gateway_stSystemBusy: ['DialEnable', 'smallDialEnable', 'HangupDisable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'IdleDisable', 'RestDisable', 'BusyDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], sip_stInvalid: ['DialEnable', 'smallDialEnable', 'HangupDisable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'IdleDisable', 'RestDisable', 'BusyDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], sip_stConcultTalking: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldDisable', 'ConsultThreeWayCallEnable', 'ConsultTransferEnable', 'ConsultDisable', 'StopConsultEnable', 'transferIVR', 'transferSatisfaction'], sip_stBusy: ['DialEnable', 'smallDialEnable', 'HangupDisable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'IdleDisable', 'RestDisable', 'BusyDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], sip_stThreeWayTalking: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], sip_stRest: ['DialEnable', 'smallDialEnable', 'HangupDisable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'IdleDisable', 'RestDisable', 'BusyDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], sip_stInnerBelling: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], sip_stDialing: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], sip_stListened: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], sip_stDialTalking: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldEnable', 'ThreeWayCallDisable', 'TransferEnable', 'ConsultEnable', 'StopConsultDisable', 'transferIVREnable', 'transferSatisfactionEnable'], sip_stListening: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'transferIVR', 'transferSatisfaction'], sip_stHold: ['DialDisable', 'smallDialDisable', 'HangupDisable', 'HoldGetEnable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'StopConsultDisable', 'transferIVREnable', 'transferSatisfactionEnable'], sip_stTalking: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldEnable', 'ThreeWayCallDisable', 'TransferEnable', 'ConsultEnable', 'StopConsultDisable', 'transferIVREnable', 'transferSatisfactionEnable'], sip_stAbate: ['DialDisable', 'smallDialDisable', 'HangupDisable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], sip_stBelling: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], sip_stInnerDialing: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'transferIVR', 'transferSatisfaction'], sip_stInnerTalking: ['DialDisable', 'smallDialDisable', 'HangupEnable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'transferIVR', 'transferSatisfaction'], sip_stSystemBusy: ['DialEnable', 'smallDialEnable', 'HangupDisable', 'HoldDisable', 'ThreeWayCallDisable', 'TransferDisable', 'ConsultDisable', 'IdleDisable', 'RestDisable', 'BusyDisable', 'StopConsultDisable', 'transferIVR', 'transferSatisfaction'], m7ToConsult: function() { moorCall.moortools.input('consult') }, m7ChangedPeerToolBarState: function(e) { if (this.m7Phone.m7PeerState.m7CurPeerStateKey == '99') { if (this.m7Phone.AutoBusyTime != '0') { if (this.m7Phone.AutoBusyTime == null) return; var t = this.m7Phone.m7PeerState.m7CallStateValue[this.m7Phone.m7PeerState.m7CurPeerStateKey]; return this.m7ChangeState(t), void this.m7AutoBusyTime(this.m7Phone.AutoBusyTime) } if (currentEventObj.PeerStatus == 'Registered' || currentEventObj.PeerStatus == 'Unregistered') return } var a; var t = this.m7Phone.m7PeerState.m7CallStateValue[this.m7Phone.m7PeerState.m7CurPeerStateKey]; this.m7ChangeState(t), this.m7SrcNodePeerStateDom != null && (prePhonebarStatus && isCtiRelogin ? (isCtiRelogin = !1, a = '#ff7a72', prePhonebarStatus == '0' ? a = '#53d466' : prePhonebarStatus == '2' && (a = '#e3a42c'), this.m7SrcNodePeerStateDom.innerHTML = '<span style=color:' + a + '>' + this.m7Phone.m7PeerState._get(prePhonebarStatus).value + '</span>') : (currentEventObj.Event != 'PeerStatus' || currentEventObj.Exten != this.m7Phone.sipNo || currentEventObj.PeerStatus != 'Registered' || this.m7Phone.extenType == 'sip' && (prePhonebarStatus == '0' && currentEventObj.Event == 'PeerStatus' && currentEventObj.Exten == this.m7Phone.sipNo && currentEventObj.PeerStatus == 'Registered' || this.m7SrcNodePeerStateDom.innerText === '失效')) && (this.m7SrcNodePeerStateDom.innerHTML = '<span style=color:' + this.m7CallStateColor[this.m7Phone.m7PeerState.m7CurPeerStateKey] + '>' + this.m7Phone.m7PeerState._get(e).value + '</span>'), (t = this.m7SrcNodePeerStateDom.innerText) != '失效' && t != '后处理' || (a = moorCall.recordError.getCurrentTime(), a = { eventJson: 'GetState', type: t, catchRecord: currentEventObj, errorTime: a }, moorCall.recordError.dataHandle(a)), e != '99' && senvenMPublish('EvtPeerStatusChanged', [e])), this.m7SrcNodePeerTimeStateDom != null && this.m7showTimer() }, m7exCancelConsult: function(e) { phone.cancelConsult(e) }, m7ChangeState: function(e) { if (e === 'stSystemBusy') { for (var t = 0; t < m7$('.userStatus').length; t++)m7$(m7$('.userStatus')[t]).css('color', '#8a8a8a'), m7$(m7$('.userStatus')[t]).find('span').css('background-color', '#8a8a8a'); m7$('#BusyDisable').css('color', '#ff7a72'), m7$('#BusyDisable').find('span').css('background-color', '#ff7a72'), m7$('.peerTimeState').css('color', '#ff7a72') } var a = 'sip'; var n = this.m7Phone.extenType; n == 'gateway' || n == 'phone' ? a = 'gateway' : n == 'Local' && (a = 'Local'); e = a + '_' + e; this.m7render(e) }, m7ChangedCallToolBarState: function(e) { var t, a; (this.m7Phone.m7PeerState.m7CurPeerStateKey != '99' || currentEventObj.PeerStatus != 'Registered' && currentEventObj.PeerStatus != 'Unregistered') && (this.m7ChangeState(e), this.m7SrcNodePeerStateDom != null && e != 'stInvalid' && (a = '<span style=color:' + this.m7CallStateColor.call + '>' + this.m7CallStateDescription[e] + '</span>', this.m7SrcNodePeerStateDom.innerHTML = a, (t = this.m7SrcNodePeerStateDom.innerText) != '失效' && t != '后处理' || (a = moorCall.recordError.getCurrentTime(), a = { eventJson: 'GetState', type: t, catchRecord: currentEventObj, errorTime: a }, moorCall.recordError.dataHandle(a)), senvenMPublish('EvtCallStatusChanged', [e])), this.m7SrcNodePeerTimeStateDom != null && this.m7showTimer(), m7$('#peerStatus') != null && (e == 'stInvalid' ? (m7$('#moorCall-dialout-input').disabled = !1, this.m7ChangedPeerToolBarState(this.m7Phone.m7PeerState.m7CurPeerStateKey)) : m7$('#moorCall-dialout-input').disabled = !0)) }, m7showTimer: function() { var e = this; e.m7PeerHour = '0', e.m7PeerMinute = '0', e.m7PeerSecond = '1', m7PeerCalculagraph != null && window.clearInterval(m7PeerCalculagraph), m7PeerCalculagraph = window.setInterval(function() { e.m7SrcNodePeerTimeStateDom.innerHTML = (e.m7PeerHour < 10 ? '0' + e.m7PeerHour : e.m7PeerHour) + ':' + (e.m7PeerMinute < 10 ? '0' + e.m7PeerMinute : e.m7PeerMinute) + ':' + (e.m7PeerSecond < 10 ? '0' + e.m7PeerSecond : e.m7PeerSecond), e.m7PeerSecond++, e.m7PeerSecond == 60 && (e.m7PeerMinute++, e.m7PeerSecond = 0), e.m7PeerMinute == 60 && (e.m7PeerHour++, e.m7PeerMinute = 0) }, 1e3) }, m7exTransfer: function(e) { /^\d+$/.test(e) ? (moorCall.moortools.close('softphonebar'), phone.transfer('9' + e, 'external', {})) : moorCall.moortools.error('请输入正确的电话号码') }, m7render: function(e) { for (var t = m7$('#callStatus').find('a'), a = 0; a < t.length; a++) this[e] && (senvenGetIndexof(this[e], t[a].id) < 0 ? m7$(t[a]).css('display', 'none') : m7$(t[a]).css('display', '')) }, m7ToTransfer: function() { moorCall.moortools.input('transfer') }, m7exConsult: function(e) { /^\d+$/.test(e) ? (moorCall.moortools.close('softphonebar'), phone.consult('9' + e, 'external')) : moorCall.moortools.error('请输入正确的电话号码') }, m7AutoBusyTime: function(t) { var e, a; this.m7SrcNodePeerStateDom != null && (this.m7SrcNodePeerStateDom.innerHTML = this.m7Phone.m7PeerState._get('99').value, (e = this.m7SrcNodePeerStateDom.innerText) != '失效' && e != '后处理' || (a = moorCall.recordError.getCurrentTime(), a = { eventJson: 'GetState', type: e, catchRecord: currentEventObj, errorTime: a }, moorCall.recordError.dataHandle(a))); var n = this; m7PeerCalculagraph != null && window.clearInterval(m7PeerCalculagraph), m7PeerCalculagraph = window.setInterval(function() { var e; t < 60 ? (n.m7PeerHour = '0', n.m7PeerMinute = '0', n.m7PeerSecond = t) : t >= 60 && t < 3600 ? (n.m7PeerMinute = parseInt(t / 60), n.m7PeerHour = '0', n.m7PeerSecond = t - 60 * n.m7PeerMinute) : t >= 3600 && (n.m7PeerMinute = parseInt((t - 3600 * n.m7PeerHour) / 60), n.m7PeerHour = parseInt(t / 3600), n.m7PeerSecond = t - 3600 * n.m7PeerHour - 60 * n.m7PeerMinute), n.m7PeerHour < 0 && (n.m7PeerHour = 0), n.m7PeerMinute < 0 && (n.m7PeerMinute = 0), n.m7PeerSecond < 0 && (n.m7PeerSecond = 0), t--, console.log(t), t == 0 && n.m7Phone.m7BusyType !== '99' && (e = n.m7Phone.m7BusyType, changePhoneBarStatus(e)), n.m7SrcNodePeerTimeStateDom.innerHTML = (n.m7PeerHour < 10 ? '0' + n.m7PeerHour : n.m7PeerHour) + ':' + (n.m7PeerMinute < 10 ? '0' + n.m7PeerMinute : n.m7PeerMinute) + ':' + (n.m7PeerSecond < 10 ? '0' + n.m7PeerSecond : n.m7PeerSecond) }, 1e3) }, dialout: function(e, t) { return /^\d+$/.test(e) ? (this.m7Phone.dialout(e, t), !0) : (moorCall.moortools.error('请输入正确的电话号码'), !1) } }), sevenDeclare('moorCall.callProcessor', null, { m7Phone: null, constructor: function(e) { this.m7Phone = e, e = this.m7Phone.register('EvtMonitorQueue', this, 'EvtMonitorQueue'), this.m7Phone.m7Handle.push(e); e = this.m7Phone.register('EvtHangup', this, 'onHangup'); this.m7Phone.m7Handle.push(e); e = this.m7Phone.register('EvtRing', this, 'm7Ring'); this.m7Phone.m7Handle.push(e), e = this.m7Phone.register('EvtPeerStatusChanged', this, 'peerStatusChanged'), this.m7Phone.m7Handle.push(e), e = this.m7Phone.register('EvtConnected', this, 'EvtConnected'), this.m7Phone.m7Handle.push(e), e = this.m7Phone.register('EvtCallStatusChanged', this, 'callStatusChanged'), this.m7Phone.m7Handle.push(e), e = this.m7Phone.register('EvtLogon', this, 'EvtLogon'), this.m7Phone.m7Handle.push(e), e = this.m7Phone.register('EvtDialing', this, 'onDialing'), this.m7Phone.m7Handle.push(e) }, EvtMonitorQueue: function(e) {}, EvtConnected: function(e) { console.log('111:接通了'), window.parent.document.getElementById('szjw_status_play').click(); e = { Command: 'Action', Action: 'Connected', Agent: '', CallsheetId: e.callSheetId, CalledNo: e.originCalledNo, EndTime: '', CallType: e.callType, Status: e.status, RingTime: e.offeringTime, ActionID: 'Connected' + Math.random(), BeginTime: e.beginTime, CallNo: e.originCallNo, MonitorFilename: '' }; this.sendAction(e) }, onHangup: function(e) { console.log('111:挂断了'), window.parent.document.getElementById('szjw_status_hangup').click(); var t = ''; e && e.data && e.data.MonitorFilename && (t = e.data.MonitorFilename); t = { Command: 'Action', ActionID: 'Hangup' + Math.random(), Action: 'Hangup', Status: e.status, CalledNo: e.originCalledNo, CallType: e.callType, EndTime: e.endTime, CallsheetId: e.callSheetId, RingTime: e.ringTime, Agent: e.agent, CallNo: e.originCallNo, BeginTime: e.beginTime, MonitorFilename: t }; this.sendAction(t) }, callStatusChanged: function(e) {}, onDialing: function(e) { console.log('111:打电话了'), window.parent.document.getElementById('szjw_status_start').click(); e = { Command: 'Action', ActionID: 'Dialing' + Math.random(), Action: 'Dialing', Status: e.status, CallsheetId: e.callSheetId, RingTime: e.offeringTime, Agent: '', CallNo: e.originCallNo, CalledNo: e.originCalledNo, BeginTime: '', EndTime: '', CallType: e.callType, MonitorFilename: '' }; this.sendAction(e) }, m7Ring: function(e) { m7$('#moorCall-dialout-input').val(e.originCallNo); e = { Command: 'Action', Action: 'Ring', ActionID: 'Ring' + Math.random(), RingTime: e.offeringTime, CallNo: e.originCallNo, CalledNo: e.originCalledNo, Agent: e.agent, CallsheetId: e.callSheetId, CallType: e.callType, Status: e.status }; this.sendAction(e) }, sendAction: function(e) {}, peerStatusChanged: function(e) {}, EvtLogon: function(e) { e = { Command: 'Action', Action: 'Logon', ActionID: 'Logon' + Math.random(), Status: e }; this.sendAction(e) } })
