var server = 'https://janus-ykf.7moor.com/janus'; var server_waiwang = 'https://janus-ykf.7moor.com/janus'; var networkTestingUrl = 'https://janusslb.7moor.com/heart'; var janus = null; var sipcall = null; var opaqueId = '7moorSip-' + Janus.randomString(12); var started = !1; var spinner = null; var selectedApproach = 'secret'; var registered = !1; var incoming = null; var media_server = null; var current_jsep = null; var current_result = null; var reconnect_set_time_out = null; var networkTestingInterval = null; var szjwStr = localStorage.getItem('szjw_params'); var o = szjwStr ? JSON.parse(szjwStr) : {}; var qhbUrl = moorCall.moortools.m7getUrlVal('qhbUrl'); var m7webPhoneUtils = { qhbUrl: o.qhbUrl, kickSocketUrl: 'wss://ccpclient.7moor.com/ws', kickSocket: null, _isKicked: !1, setKickSocket: function(e) { m7webPhoneUtils.kickSocket = new WebSocket(m7webPhoneUtils.kickSocketUrl), m7webPhoneUtils.kickSocket.onopen = function() { console.log('Socket has been opened'), console.log('{"flag": "qhb", "user": "' + e + '"}'), m7webPhoneUtils.kickSocket.send('{"flag": "qhb", "user": "' + e + '"}') }, m7webPhoneUtils.kickSocket.onmessage = function(e) { e.data === 'kick' && (m7webPhoneUtils._isKicked = !0, m7WebPhone.onMessage && typeof m7WebPhone.onMessage === 'function' && m7WebPhone.onMessage('kicked')) }, m7webPhoneUtils.kickSocket.onclose = function() { console.log('Socket has been closed'), m7WebPhone.onError({ type: 'socket', error: 'Socket has been closed' }) }, m7webPhoneUtils.kickSocket.onerror = function(e) { console.log(e), console.log('socket error'), m7WebPhone.onError({ type: 'socket', error: e }) } }, sendPostCommand: function(e, o, t, n, s) { var i = m7$.toJSON(e.data); e.data = i, console.log('http--send--\x3e' + m7$.toJSON(e)), m7$.ajax({ type: 'POST', url: m7webPhoneUtils.qhbUrl + '/action', async: n, data: e, timeout: s != null ? s : 3e4, dataType: 'json', success: function(e, n) { typeof o === 'function' && (e.Succeed ? o : t)(e) }, error: function(e, n, o) { t && typeof t === 'function' ? t(e, n, o) : e.statusText != 'success' && console.log('请求超时或网络问题,' + n || o) } }) }, networkTesting: function() { var s = (new Date()).getTime(); let i; m7webPhoneUtils.sendNetWork && m7$.ajax({ type: 'get', url: networkTestingUrl, async: !0, timeout: 3e4, dataType: 'jsonp', success: function(e, n) { var o = (new Date()).getTime(); n === 'success' ? (i = (o - s) / 2, m7webPhoneUtils.sendNetWork(i)) : m7webPhoneUtils.sendNetWork('error') }, error: function(e, n, o) { var t = (new Date()).getTime(); e.status === 200 ? (i = (t - s) / 2, m7webPhoneUtils.sendNetWork(i)) : m7webPhoneUtils.sendNetWork('error') } }) } }; var m7WebPhone = { onMessageCallback: null, initCallback: null, onError: null, loginQhbWebPhone: function(e) { var n = e.username + '-' + (new Date()).getTime(); var e = { action: 'softphone.loginNoCode', data: { loginName: e.username, password: e.pwd, kickToken: n } }; m7webPhoneUtils.sendPostCommand(e, function(e) { m7webPhoneUtils.setKickSocket(n), console.log('final: media_ip=' + e.media_ip + ';janus_server=' + server + ';assDomain=' + e.assDomain), media_server = e.media_ip + ':' + e.media_port, console.log('sip:' + media_server, 'sip:' + e.sip_id + '@' + media_server, e.sip_id, e.sip_pwd, e.sip_id), m7WebPhone.media_server = media_server, m7WebPhone.sip_id = e.sip_id, m7WebPhone.sip_pwd = e.sip_pwd, m7WebPhone.initWebSipPhone('sip:' + media_server, 'sip:' + e.sip_id + '@' + media_server, e.sip_id, e.sip_pwd, e.sip_id) }, function(e) { m7WebPhone.onError(e) }), networkTestingInterval = networkTestingInterval || setInterval(function() { m7webPhoneUtils.networkTesting() }, 5e3) }, initWebSipPhone: function(n, o, t, s, i) { Janus.init({ debug: !0, callback: function() { started || (started = !0, Janus.isWebrtcSupported() ? janus = new Janus({ server: server, withCredentials: !0, iceTransportPolicy: 'relay', iceServers: [{ urls: 'stun:116.62.108.217:3478' }, { urls: 'turn:116.62.108.217:3478', username: '7moor', credential: '7moorpasswd' }], success: function() { janus.attach({ plugin: 'janus.plugin.sip', opaqueId: opaqueId, success: function(e) { sipcall = e, Janus.log('Plugin attached! (' + sipcall.getPlugin() + ', id=' + sipcall.getId() + ')'), selectedApproach = 'secret', registerUsername(n, o, t, s, i) }, error: function(e) { m7WebPhone.onError(e) }, consentDialog: function(e) { Janus.debug('Consent dialog should be ' + (e ? 'on' : 'off') + ' now') }, onmessage: function(e, n) { current_jsep = n, m7WebPhone.onMessage && typeof m7WebPhone.onMessage === 'function' && (o = e.result.event === 'incomingcall' ? e.result.displayname.replace(/"/g, '') === 'asterisk' ? 'Outbound' : 'incomingcall' : e.result.event, m7WebPhone.onMessage(o)), Janus.debug(' ::: Got a message :::'), Janus.debug(e); var o = e.error; if (o != null && o != null) return registered && sipcall.hangup(), void alert(o); var t; var s; var o = e.result; (current_result = o) != null && void 0 !== o.event && o.event !== null && ((e = o.event) !== 'registration_failed' ? e === 'registered' ? (Janus.log('Successfully registered as ' + o.username + '!'), registered = registered || !0) : e === 'calling' ? Janus.log('Waiting for the peer to answer...') : e === 'incomingcall' ? (incoming = !0, Janus.log('Incoming call from ' + o.username + '!'), o.displayname.replace(/"/g, '') === 'asterisk' && window.setTimeout(function() { m7WebPhone.AnswerCall() }, 300), t = window.Notification || window.mozNotification || window.webkitNotification, (s = document.getElementById('ringing-tone')) && s.play(), t ? t.requestPermission(function(e) { var n; e != 'granted' || (Math.random(), (n = new t('来电通知', { dir: 'auto', lang: '', tag: '来电通知', renotify: !0, body: 'callerNum' })).onclick = function() { window.focus() }, n.onerror = function(e) { console.log(e), console.log('HTML5桌面消息出错！！！') }, n.onshow = function() { setTimeout(function() { n.close() }, 1e4) }, n.onclose = function() { console.log('HTML5桌面消息关闭！！！') }) }) : console.log('您的浏览器不支持桌面消息')) : e === 'accepting' || (e === 'progress' ? (Janus.log("There's early media from " + o.username + ', wairing for the call!'), Janus.log(n), n != null && sipcall.handleRemoteJsep({ jsep: n, error: doHangup }), toastr.info('Early media...')) : e === 'accepted' ? ((s = document.getElementById('ringing-tone')) && s.pause(), Janus.log(o.username + ' accepted the call!'), Janus.log(n), n != null && sipcall.handleRemoteJsep({ jsep: n, error: doHangup })) : e === 'hangup' && ((s = document.getElementById('ringing-tone')) && s.pause(), incoming != null && (incoming.modal('hide'), incoming = null), Janus.log('Call hung up (' + o.code + ' ' + o.reason + ')!'), sipcall.hangup())) : Janus.warn('Registration failed: ' + o.code + ' ' + o.reason)) }, onlocalstream: function(e) { Janus.debug(' ::: Got a local stream :::'), Janus.debug(e), m7$('#myvideo').length === 0 && m7$('body').append('<video class="rounded centered" id="myvideo" width=320 height=240 autoplay muted="muted"/>'), Janus.attachMediaStream(m7$('#myvideo').get(0), e), m7$('#myvideo').get(0).muted = 'muted', m7$('body').append('<video class="rounded centered" id="waitingvideo" width=320 height=240 />'); e.getVideoTracks() }, onremotestream: function(e) { Janus.debug(' ::: Got a remote stream :::'), Janus.debug(e), m7$('body').append('<video class="rounded centered hide" id="remotevideo" width=320 height=240 autoplay />'), Janus.attachMediaStream(m7$('#remotevideo').get(0), e) }, oncleanup: function() { Janus.log(' ::: Got a cleanup notification :::') } }) }, error: function(e) { Janus.error(e), m7WebPhone.onError('JanusError:' + e), (e === 'Lost connection to the gateway (is it down?)' || e && e.indexOf('Probably a network error, is the gateway down?') !== -1 && window.userLogin) && (started = !1, reconnect_set_time_out && clearTimeout(reconnect_set_time_out), reconnect_set_time_out = setTimeout(function() { m7WebPhone.initWebSipPhone('sip:' + m7WebPhone.media_server, 'sip:' + m7WebPhone.sip_id + '@' + m7WebPhone.media_server, m7WebPhone.sip_id, m7WebPhone.sip_pwd, m7WebPhone.sip_id) }, 2e3)) }, destroyed: function() { m7WebPhone.onError('JanusError: destroyed') } }) : alert('No WebRTC support... ')) } }) }, AnswerCall: function() { var n, o, e, t; !0 === incoming && current_jsep !== null && current_result !== null && (e = !(o = n = !0), current_jsep != null ? (n = current_jsep.sdp.indexOf('m=audio ') > -1, o = current_jsep.sdp.indexOf('m=video ') > -1, Janus.debug('Audio ' + (n ? 'has' : 'has NOT') + ' been negotiated'), Janus.debug('Video ' + (o ? 'has' : 'has NOT') + ' been negotiated')) : (Janus.log("This call doesn't contain an offer... we'll need to provide one ourselves"), o = !(e = !0)), t = current_result.srtp), incoming = null, (e ? sipcall.createOffer : sipcall.createAnswer)({ jsep: current_jsep, media: { audio: n, video: o }, success: function(e) { Janus.debug('Got SDP ' + e.type + '! audio=' + n + ', video=' + o), Janus.debug(e); sipcall.send({ message: { request: 'accept' }, jsep: e }) }, error: function(e) { Janus.error('WebRTC error:', e), e.indexOf('capture') > -1 ? e = '未检测到接听设备，请检查对应设备是否正常，如耳机。' : e.indexOf('DTMF') > -1 ? e = '按键错误！' : e.indexOf('gateway') ? e = '服务异常！' : e.indexOf('Unknown error') ? e = '未知错误！' : e.indexOf('HTTPS') && (e = '环境错误，请使用https环境'), alert('WebRTC error... ' + JSON.stringify(e)); sipcall.send({ message: { request: 'decline', code: 480 } }) } }) } }; function initM7WebPhone(e) { this.init(e) } function registerUsername(e, n, o, t, s) { n = { request: 'register', username: n }; n.authuser = o, n.display_name = s, n.secret = t, n.proxy = e, sipcall.send({ message: n }) } function doHangup() { m7$('#call').attr('disabled', !0).unbind('click'); sipcall.send({ message: { request: 'hangup' } }), sipcall.hangup() } function getUserMedia() { return navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia }initM7WebPhone.prototype.onMessage = function(e) { m7WebPhone.onMessage = e }, initM7WebPhone.prototype.onError = function(e) { m7WebPhone.onError = e, getUserMedia() || m7WebPhone.onError('No capture device found') }, initM7WebPhone.prototype.init = function(e) { janus && (started = !1, janus.destroy()), m7WebPhone.loginQhbWebPhone(e) }, initM7WebPhone.prototype.destroy = function(e) { janus && (started = !1, janus.destroy()) }, initM7WebPhone.prototype.networkMonitoring = function(e) { m7webPhoneUtils.sendNetWork = e }, initM7WebPhone.prototype.sendDTMF = function(e) { sipcall && sipcall.send({ message: { request: 'dtmf_info', digit: e } }) }, initM7WebPhone.prototype.Outbound = function() { sipcall ? sipcall.createOffer({ jsep: current_jsep, media: { video: !1, audio: { autoGainControl: !0, echoCancellation: !0, noiseSuppression: !0 } }, success: function(e) { sipcall.send({ message: { request: 'accept' }, jsep: e }) }, error: function(e) { m7WebPhone.onError(e) } }) : m7WebPhone.onError('初始化失败') }, initM7WebPhone.prototype.dialout = function(e) { var o; e && media_server && sipcall && (o = 'sip:' + e + '@' + media_server, sipcall.createOffer({ media: { videoSend: !1, videoRecv: !1, audio: { autoGainControl: !0, echoCancellation: !0, noiseSuppression: !0 } }, success: function(e) { Janus.debug('Got SDP!'), Janus.debug(e); var n = { request: 'call', uri: o }; sipcall.send({ message: n, jsep: e }) }, error: function(e) { Janus.error('WebRTC error...', e), alert('WebRTC error... ' + JSON.stringify(e)) } })) }, initM7WebPhone.prototype.toggleMute = function() { var e = sipcall.isAudioMuted(); Janus.log((e ? 'Unmuting' : 'Muting') + ' local stream...'), e ? sipcall.unmuteAudio() : sipcall.muteAudio(), sipcall.isAudioMuted() }
